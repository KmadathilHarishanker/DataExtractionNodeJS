<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Parser Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="max-w-6xl mx-auto py-8 px-4">
        <div class="bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-2xl p-8 mb-8 shadow-lg text-center">
            <h1 class="text-4xl font-bold mb-2">📊 File Parser Dashboard</h1>
            <p class="text-lg opacity-90">Upload CSV, JSON, or XML files to parse and store in database for analytics</p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <div class="bg-white rounded-xl shadow p-8 flex flex-col items-center">
                <h2 class="text-2xl font-semibold text-indigo-600 mb-4">📁 Upload File</h2>
                <div class="w-full border-2 border-dashed border-indigo-400 rounded-lg p-8 text-center bg-indigo-50 hover:bg-indigo-100 transition mb-4" id="uploadArea">
                    <p class="text-gray-600">Drag and drop your file here or</p>
                    <button class="mt-4 px-6 py-2 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-full font-semibold shadow hover:scale-105 transition" onclick="document.getElementById('fileInput').click()">
                        Choose File
                    </button>
                    <input type="file" id="fileInput" class="hidden" accept=".csv,.json,.xml">
                    <p class="mt-4 text-sm text-gray-500">Supported formats: CSV, JSON, XML (Max 10MB)</p>
                </div>
                <div class="hidden text-center" id="loading">
                    <svg class="animate-spin h-8 w-8 text-indigo-500 mx-auto mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path></svg>
                    <p>Processing file...</p>
                </div>
                <div class="hidden mt-4" id="status"></div>
            </div>

            <div class="bg-white rounded-xl shadow p-8">
                <h2 class="text-2xl font-semibold text-indigo-600 mb-4">📈 Statistics</h2>
                <div class="grid grid-cols-2 md:grid-cols-3 gap-4" id="statsGrid">
                    <div class="bg-indigo-50 rounded-lg p-4 text-center">
                        <div class="text-2xl font-bold text-indigo-600" id="totalUploads">0</div>
                        <div class="text-gray-600">Total Uploads</div>
                    </div>
                    <div class="bg-indigo-50 rounded-lg p-4 text-center">
                        <div class="text-2xl font-bold text-indigo-600" id="totalRecords">0</div>
                        <div class="text-gray-600">Total Records</div>
                    </div>
                    <div class="bg-indigo-50 rounded-lg p-4 text-center">
                        <div class="text-2xl font-bold text-indigo-600" id="csvFiles">0</div>
                        <div class="text-gray-600">CSV Files</div>
                    </div>
                    <div class="bg-indigo-50 rounded-lg p-4 text-center">
                        <div class="text-2xl font-bold text-indigo-600" id="jsonFiles">0</div>
                        <div class="text-gray-600">JSON Files</div>
                    </div>
                    <div class="bg-indigo-50 rounded-lg p-4 text-center">
                        <div class="text-2xl font-bold text-indigo-600" id="xmlFiles">0</div>
                        <div class="text-gray-600">XML Files</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <div class="bg-white rounded-xl shadow p-8">
                <h2 class="text-2xl font-semibold text-indigo-600 mb-4">📋 Recent Uploads</h2>
                <div class="max-h-80 overflow-y-auto" id="uploadsList">
                    <p class="text-gray-500 text-center">No uploads yet</p>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow p-8">
                <h2 class="text-2xl font-semibold text-indigo-600 mb-4">📊 Power BI Real-time Dashboard</h2>
                <p class="mb-4 text-gray-600">View live analytics and insights from your uploaded files.</p>
                <!-- Replace the src below with your Power BI embed URL -->
                <iframe 
                    src="https://app.powerbi.com/view?r=eyJrIjoiYOUR_DASHBOARD_ID_HERE" 
                    width="100%" 
                    height="500" 
                    frameborder="0" 
                    allowfullscreen="true"
                    class="rounded-lg shadow">
                </iframe>
                <div class="mt-4 flex justify-center gap-4">
                    <button onclick="refreshPowerBI()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition">
                        🔄 Refresh Dashboard
                    </button>
                    <a href="https://app.powerbi.com" target="_blank" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition">
                        📊 Open in Power BI
                    </a>
                </div>
            </div>
        </div>

        <div class="flex justify-center gap-4 flex-wrap">
            <a href="/database-viewer" class="px-6 py-2 bg-indigo-500 text-white rounded-full font-semibold shadow hover:bg-indigo-600 transition">🗄️ View Database Records</a>
            <a href="/latest-report" class="px-6 py-2 bg-blue-500 text-white rounded-full font-semibold shadow hover:bg-blue-600 transition">📊 Latest Power BI Report</a>
            <a href="/api/export-latest-csv" class="px-6 py-2 bg-green-500 text-white rounded-full font-semibold shadow hover:bg-green-600 transition">📥 Export Latest CSV</a>
            <a href="/api/export-latest-json" class="px-6 py-2 bg-purple-500 text-white rounded-full font-semibold shadow hover:bg-purple-600 transition">📥 Export Latest JSON</a>
        </div>
    </div>

    <script>
        // Global variables
        let uploadArea = document.getElementById('uploadArea');
        let fileInput = document.getElementById('fileInput');
        let loading = document.getElementById('loading');
        let status = document.getElementById('status');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadStats();
            loadUploads();
            setupEventListeners();
        });

        function setupEventListeners() {
            // File input change
            fileInput.addEventListener('change', handleFileSelect);

            // Drag and drop
            uploadArea.addEventListener('dragover', handleDragOver);
            uploadArea.addEventListener('dragleave', handleDragLeave);
            uploadArea.addEventListener('drop', handleDrop);
        }

        function handleDragOver(e) {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                uploadFile(files[0]);
            }
        }

        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                uploadFile(file);
            }
        }

        async function uploadFile(file) {
            // Validate file type
            const allowedTypes = ['.csv', '.json', '.xml'];
            const fileExt = '.' + file.name.split('.').pop().toLowerCase();
            
            if (!allowedTypes.includes(fileExt)) {
                showStatus('error', 'Please select a CSV, JSON, or XML file.');
                return;
            }

            // Show loading
            loading.style.display = 'block';
            status.style.display = 'none';

            try {
                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (response.ok) {
                    showStatus('success', result.message);
                    loadStats();
                    loadUploads();
                    fileInput.value = ''; // Clear input
                } else {
                    showStatus('error', result.error || 'Upload failed');
                }
            } catch (error) {
                showStatus('error', 'Network error: ' + error.message);
            } finally {
                loading.style.display = 'none';
            }
        }

        function showStatus(type, message) {
            status.className = `status ${type}`;
            status.textContent = message;
            status.style.display = 'block';
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                status.style.display = 'none';
            }, 5000);
        }

        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const stats = await response.json();

                document.getElementById('totalUploads').textContent = stats.total_uploads || 0;
                document.getElementById('totalRecords').textContent = stats.total_records || 0;
                document.getElementById('csvFiles').textContent = stats.csv_files || 0;
                document.getElementById('jsonFiles').textContent = stats.json_files || 0;
                document.getElementById('xmlFiles').textContent = stats.xml_files || 0;
            } catch (error) {
                console.error('Failed to load stats:', error);
            }
        }

        async function loadUploads() {
            try {
                const response = await fetch('/api/uploads');
                const data = await response.json();
                const uploads = data.uploads || [];

                const uploadsList = document.getElementById('uploadsList');
                
                if (uploads.length === 0) {
                    uploadsList.innerHTML = '<p style="color: #666; text-align: center;">No uploads yet</p>';
                    return;
                }

                uploadsList.innerHTML = uploads.map(upload => `
                    <div class="upload-item">
                        <h4>${upload.filename}</h4>
                        <div class="upload-meta">
                            Type: ${upload.file_type.toUpperCase()} | 
                            Records: ${upload.record_count} | 
                            Date: ${new Date(upload.upload_date).toLocaleString()}
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Failed to load uploads:', error);
            }
        }

        // Function to refresh Power BI embed
        function refreshPowerBI() {
            const iframe = document.querySelector('iframe[src*="powerbi.com"]');
            if (iframe) {
                iframe.src = iframe.src; // Force iframe to reload its content
            }
        }
    </script>
</body>
</html>
